'''

Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate
(polygonal) numbers and are generated by the following formulae:

Triangle        P3,n=n(n+1)/2       1, 3, 6, 10, 15, ...
Square          P4,n=n2             1, 4, 9, 16, 25, ...
Pentagonal      P5,n=n(3n−1)/2      1, 5, 12, 22, 35, ...
Hexagonal       P6,n=n(2n−1)        1, 6, 15, 28, 45, ...
Heptagonal      P7,n=n(5n−3)/2      1, 7, 18, 34, 55, ...
Octagonal       P8,n=n(3n−2)        1, 8, 21, 40, 65, ...
The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.

The set is cyclic, in that the last two digits of each number is the first two digits of the next number
(including the last number with the first).
Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and pentagonal (P5,44=2882),
is represented by a different number in the set.
This is the only set of 4-digit numbers with this property.
Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type:
triangle, square, pentagonal, hexagonal, heptagonal, and octagonal, is represented by a different number
in the set.

'''

from datetime import datetime
startTime = datetime.now()


def gen():
    
    botlim = 1000
    toplim = 9999
    
    candidate = 1
    
    for i in range(0, 6):
    
        n=1
        candidate = 1

        while (candidate <= toplim):
            
             if (i == 0):
                 candidate = int(n*(n+1)/2)
             if (i == 1):
                 candidate = int(n*n)
             if (i == 2):
                 candidate = int(n*(3*n-1)/2)
             if (i == 3):
                 candidate = int(n*(2*n-1))
             if (i == 4):
                 candidate = int(n*(5*n-3)/2)
             if (i == 5):
                 candidate = int(n*(3*n-2))
                
             
             if (botlim <= candidate and candidate <= toplim):
                 
                 numbers.append((i, candidate))
            
             n+=1
    
def next(types, data):
    if len(types) == 6 and data[0] // 100 == data[-1] % 100:
        print (data, sum(data))
    else:
        for t, n in relations.get((types[-1], data[-1]), []):
            if t not in types:
                next(types+[t], data+[n])

numbers = []

relations = {}

gen()

for (t1, d1) in numbers:
    
    relations[t1,d1] = []
    
    for (t2, d2) in numbers:
            
         if t1 != t2 and d1 % 100 == d2 // 100:

             #relations[t1, d1] = relations.get((t1, d1),[]) + [(t2, d2)] #append relation to dictionary
             relations[t1, d1].append( (t2, d2) )
#               x = relations.get((t1,d1), [])
#               x.append( (t2,d2) )
#               relations.update({(t1,d1): x}) #different ways of appending
              
             
for types, data in relations: next([types], [data])

print('execution time:', datetime.now() - startTime)
